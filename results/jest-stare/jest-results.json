{
  "numFailedTestSuites": 3,
  "numFailedTests": 6,
  "numPassedTestSuites": 11,
  "numPassedTests": 55,
  "numPendingTestSuites": 0,
  "numPendingTests": 0,
  "numRuntimeErrorTestSuites": 0,
  "numTodoTests": 0,
  "numTotalTestSuites": 14,
  "numTotalTests": 61,
  "openHandles": [],
  "snapshot": {
    "added": 0,
    "didUpdate": false,
    "failure": false,
    "filesAdded": 0,
    "filesRemoved": 0,
    "filesRemovedList": [],
    "filesUnmatched": 0,
    "filesUpdated": 0,
    "matched": 0,
    "total": 0,
    "unchecked": 0,
    "uncheckedKeysByFile": [],
    "unmatched": 0,
    "updated": 0
  },
  "startTime": 1600285291095,
  "success": false,
  "testResults": [
    {
      "leaks": false,
      "numFailingTests": 1,
      "numPassingTests": 3,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1600285299066,
        "runtime": 2377,
        "slow": false,
        "start": 1600285296689
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "unmatched": 0,
        "updated": 0,
        "uncheckedKeys": []
      },
      "testFilePath": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\JS-QAA2\\animal-leg-counter.test.js",
      "testResults": [
        {
          "ancestorTitles": [],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify animal leg count",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify animal leg count"
        },
        {
          "ancestorTitles": [],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify animal leg count when no animals provided",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify animal leg count when no animals provided"
        },
        {
          "ancestorTitles": [],
          "duration": 6,
          "failureDetails": [
            {
              "actual": "",
              "error": {
                "matcherResult": {
                  "actual": -4,
                  "expected": "Please enter positive animal count",
                  "name": "toBe",
                  "pass": false
                }
              },
              "expected": "",
              "matcherName": "",
              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"Please enter positive animal count\"\u001b[39m\nReceived: \u001b[31m-4\u001b[39m",
              "passed": false,
              "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"Please enter positive animal count\"\u001b[39m\nReceived: \u001b[31m-4\u001b[39m\n    at Object.<anonymous> (D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\JS-QAA2\\animal-leg-counter.test.js:23:36)\n    at Object.asyncJestTest (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)"
            }
          ],
          "failureMessages": [
            "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"Please enter positive animal count\"\u001b[39m\nReceived: \u001b[31m-4\u001b[39m\n    at Object.<anonymous> (D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\JS-QAA2\\animal-leg-counter.test.js:23:36)\n    at Object.asyncJestTest (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)"
          ],
          "fullName": "Verify animal leg count when animal count is negative",
          "location": null,
          "numPassingAsserts": 0,
          "status": "failed",
          "title": "Verify animal leg count when animal count is negative"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify animal leg count when one of the animal details are empty",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify animal leg count when one of the animal details are empty"
        }
      ],
      "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mVerify animal leg count when animal count is negative\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"Please enter positive animal count\"\u001b[39m\n    Received: \u001b[31m-4\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 21 | \u001b[39m    input \u001b[33m=\u001b[39m [{\u001b[32m'animalname'\u001b[39m \u001b[33m:\u001b[39m\u001b[32m'chicken'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'animalleg'\u001b[39m \u001b[33m:\u001b[39m \u001b[35m2\u001b[39m\u001b[33m,\u001b[39m\u001b[32m'animalcount'\u001b[39m \u001b[33m:\u001b[39m \u001b[33m-\u001b[39m\u001b[35m2\u001b[39m}]\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 22 | \u001b[39m    expectedOutput \u001b[33m=\u001b[39m \u001b[32m'Please enter positive animal count'\u001b[39m \u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 23 | \u001b[39m    expect(totalAnimalLegs(input))\u001b[33m.\u001b[39mtoBe(expectedOutput)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 24 | \u001b[39m})\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 25 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 26 | \u001b[39mtest(\u001b[32m'Verify animal leg count when one of the animal details are empty'\u001b[39m \u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/test/JS-QAA2/animal-leg-counter.test.js\u001b[39m\u001b[0m\u001b[2m:23:36)\u001b[22m\u001b[2m\u001b[22m\n"
    },
    {
      "leaks": false,
      "numFailingTests": 1,
      "numPassingTests": 0,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1600285299144,
        "runtime": 2408,
        "slow": false,
        "start": 1600285296736
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "unmatched": 0,
        "updated": 0,
        "uncheckedKeys": []
      },
      "testFilePath": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\JS-QAA4\\calculator1.test.js",
      "testResults": [
        {
          "ancestorTitles": [],
          "duration": 5,
          "failureDetails": [
            {
              "actual": "",
              "error": {},
              "expected": "",
              "matcherName": "",
              "message": "ReferenceError: Invalid left-hand side in assignment",
              "passed": false,
              "stack": "ReferenceError: Invalid left-hand side in assignment\n    at Object.<anonymous> (D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\JS-QAA4\\calculator1.test.js:4:14)\n    at Object.asyncJestTest (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)"
            }
          ],
          "failureMessages": [
            "ReferenceError: Invalid left-hand side in assignment\n    at Object.<anonymous> (D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\JS-QAA4\\calculator1.test.js:4:14)\n    at Object.asyncJestTest (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)"
          ],
          "fullName": "Calc",
          "location": null,
          "numPassingAsserts": 0,
          "status": "failed",
          "title": "Calc"
        }
      ],
      "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mCalc\u001b[39m\u001b[22m\n\n    ReferenceError: Invalid left-hand side in assignment\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 2 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 3 | \u001b[39mtest(\u001b[32m'Calc'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 4 | \u001b[39m    document\u001b[33m.\u001b[39mgetElementById(\u001b[32m'inputVal'\u001b[39m)\u001b[33m=\u001b[39m \u001b[32m'5+4'\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m   | \u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 5 | \u001b[39m    \u001b[36mconst\u001b[39m expectedOutput \u001b[33m=\u001b[39m \u001b[35m9\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 6 | \u001b[39m    expect(calculation())\u001b[33m.\u001b[39mtoBe(expectedOutput)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 7 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/test/JS-QAA4/calculator1.test.js\u001b[39m\u001b[0m\u001b[2m:4:14)\u001b[22m\u001b[2m\u001b[22m\n"
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 12,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1600285299251,
        "runtime": 2278,
        "slow": false,
        "start": 1600285296973
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "unmatched": 0,
        "updated": 0,
        "uncheckedKeys": []
      },
      "testFilePath": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\JS-QAA3\\get-n-element-of-array.test.js",
      "testResults": [
        {
          "ancestorTitles": [],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Get first elements, n not specified",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Get first elements, n not specified"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Get first elements, n specified",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Get first elements, n specified"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Get first elements, n (-ve) specified",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Get first elements, n (-ve) specified"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Empty array, n not specified",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Empty array, n not specified"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Get first elements, n not specified",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Get first elements, n not specified"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Get first elements, n specified",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Get first elements, n specified"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Get first elements, n (-ve) specified",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Get first elements, n (-ve) specified"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Empty array, n not specified",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Empty array, n not specified"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Get first elements, n not specified",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Get first elements, n not specified"
        },
        {
          "ancestorTitles": [],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Get first elements, n specified",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Get first elements, n specified"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Get first elements, n (-ve) specified",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Get first elements, n (-ve) specified"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Empty array, n not specified",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Empty array, n not specified"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 4,
      "numPassingTests": 4,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1600285299284,
        "runtime": 2325,
        "slow": false,
        "start": 1600285296959
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "unmatched": 0,
        "updated": 0,
        "uncheckedKeys": []
      },
      "testFilePath": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\JS-QAA3\\reverse-a-number.test.js",
      "testResults": [
        {
          "ancestorTitles": [],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify reverse number for number",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify reverse number for number"
        },
        {
          "ancestorTitles": [],
          "duration": 6,
          "failureDetails": [
            {
              "actual": "",
              "error": {
                "matcherResult": {
                  "actual": 32,
                  "expected": 26,
                  "name": "toBe",
                  "pass": false
                }
              },
              "expected": "",
              "matcherName": "",
              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m26\u001b[39m\nReceived: \u001b[31m32\u001b[39m",
              "passed": false,
              "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m26\u001b[39m\nReceived: \u001b[31m32\u001b[39m\n    at Object.<anonymous> (D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\JS-QAA3\\reverse-a-number.test.js:14:43)\n    at Object.asyncJestTest (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)"
            }
          ],
          "failureMessages": [
            "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m26\u001b[39m\nReceived: \u001b[31m32\u001b[39m\n    at Object.<anonymous> (D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\JS-QAA3\\reverse-a-number.test.js:14:43)\n    at Object.asyncJestTest (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)"
          ],
          "fullName": "Verify reverse number when number ends with 0",
          "location": null,
          "numPassingAsserts": 0,
          "status": "failed",
          "title": "Verify reverse number when number ends with 0"
        },
        {
          "ancestorTitles": [],
          "duration": 2,
          "failureDetails": [
            {
              "actual": "",
              "error": {
                "matcherResult": {
                  "actual": 54,
                  "expected": 54.032,
                  "name": "toBe",
                  "pass": false
                }
              },
              "expected": "",
              "matcherName": "",
              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m54.032\u001b[39m\nReceived: \u001b[31m54\u001b[39m",
              "passed": false,
              "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m54.032\u001b[39m\nReceived: \u001b[31m54\u001b[39m\n    at Object.<anonymous> (D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\JS-QAA3\\reverse-a-number.test.js:20:43)\n    at Object.asyncJestTest (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)"
            }
          ],
          "failureMessages": [
            "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m54.032\u001b[39m\nReceived: \u001b[31m54\u001b[39m\n    at Object.<anonymous> (D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\JS-QAA3\\reverse-a-number.test.js:20:43)\n    at Object.asyncJestTest (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)"
          ],
          "fullName": "Verify reverse number when number is float no",
          "location": null,
          "numPassingAsserts": 0,
          "status": "failed",
          "title": "Verify reverse number when number is float no"
        },
        {
          "ancestorTitles": [],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify reverse number when number is too large(17 digit long)",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify reverse number when number is too large(17 digit long)"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify reverse number for number",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify reverse number for number"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [
            {
              "actual": "",
              "error": {
                "matcherResult": {
                  "actual": 32,
                  "expected": 26,
                  "name": "toBe",
                  "pass": false
                }
              },
              "expected": "",
              "matcherName": "",
              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m26\u001b[39m\nReceived: \u001b[31m32\u001b[39m",
              "passed": false,
              "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m26\u001b[39m\nReceived: \u001b[31m32\u001b[39m\n    at Object.<anonymous> (D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\JS-QAA3\\reverse-a-number.test.js:38:56)\n    at Object.asyncJestTest (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)"
            }
          ],
          "failureMessages": [
            "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m26\u001b[39m\nReceived: \u001b[31m32\u001b[39m\n    at Object.<anonymous> (D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\JS-QAA3\\reverse-a-number.test.js:38:56)\n    at Object.asyncJestTest (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)"
          ],
          "fullName": "Verify reverse number when number ends with 0",
          "location": null,
          "numPassingAsserts": 0,
          "status": "failed",
          "title": "Verify reverse number when number ends with 0"
        },
        {
          "ancestorTitles": [],
          "duration": 2,
          "failureDetails": [
            {
              "actual": "",
              "error": {
                "matcherResult": {
                  "actual": 76.99999999999886,
                  "expected": 54.032,
                  "name": "toBe",
                  "pass": false
                }
              },
              "expected": "",
              "matcherName": "",
              "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m54.032\u001b[39m\nReceived: \u001b[31m76.99999999999886\u001b[39m",
              "passed": false,
              "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m54.032\u001b[39m\nReceived: \u001b[31m76.99999999999886\u001b[39m\n    at Object.<anonymous> (D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\JS-QAA3\\reverse-a-number.test.js:44:56)\n    at Object.asyncJestTest (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)"
            }
          ],
          "failureMessages": [
            "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m54.032\u001b[39m\nReceived: \u001b[31m76.99999999999886\u001b[39m\n    at Object.<anonymous> (D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\JS-QAA3\\reverse-a-number.test.js:44:56)\n    at Object.asyncJestTest (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)"
          ],
          "fullName": "Verify reverse number when number is float no",
          "location": null,
          "numPassingAsserts": 0,
          "status": "failed",
          "title": "Verify reverse number when number is float no"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify reverse number when number is too large(17 digit long)",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify reverse number when number is too large(17 digit long)"
        }
      ],
      "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mVerify reverse number when number ends with 0\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m26\u001b[39m\n    Received: \u001b[31m32\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 12 | \u001b[39m    \u001b[36mconst\u001b[39m input \u001b[33m=\u001b[39m\u001b[35m230\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 13 | \u001b[39m    \u001b[36mconst\u001b[39m expectedoutput \u001b[33m=\u001b[39m \u001b[35m032\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 14 | \u001b[39m    expect(reverse\u001b[33m.\u001b[39mreversedNumber(input))\u001b[33m.\u001b[39mtoBe(expectedoutput)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 15 | \u001b[39m})\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 16 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 17 | \u001b[39mtest(\u001b[32m'Verify reverse number when number is float no'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/test/JS-QAA3/reverse-a-number.test.js\u001b[39m\u001b[0m\u001b[2m:14:43)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mVerify reverse number when number is float no\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m54.032\u001b[39m\n    Received: \u001b[31m54\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 18 | \u001b[39m    \u001b[36mconst\u001b[39m input \u001b[33m=\u001b[39m\u001b[35m230.45\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 | \u001b[39m    \u001b[36mconst\u001b[39m expectedoutput \u001b[33m=\u001b[39m \u001b[35m54.032\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 20 | \u001b[39m    expect(reverse\u001b[33m.\u001b[39mreversedNumber(input))\u001b[33m.\u001b[39mtoBe(expectedoutput)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 21 | \u001b[39m})\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 22 | \u001b[39mtest(\u001b[32m'Verify reverse number when number is too large(17 digit long)'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 23 | \u001b[39m    \u001b[36mconst\u001b[39m input \u001b[33m=\u001b[39m\u001b[35m12345678901234567\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/test/JS-QAA3/reverse-a-number.test.js\u001b[39m\u001b[0m\u001b[2m:20:43)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mVerify reverse number when number ends with 0\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m26\u001b[39m\n    Received: \u001b[31m32\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 | \u001b[39m    \u001b[36mconst\u001b[39m input \u001b[33m=\u001b[39m\u001b[35m230\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 37 | \u001b[39m    \u001b[36mconst\u001b[39m expectedoutput \u001b[33m=\u001b[39m \u001b[35m032\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 38 | \u001b[39m    expect(reverse\u001b[33m.\u001b[39mreverseNumberTraditionalway(input))\u001b[33m.\u001b[39mtoBe(expectedoutput)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                                       \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 39 | \u001b[39m})\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 40 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 41 | \u001b[39mtest(\u001b[32m'Verify reverse number when number is float no'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/test/JS-QAA3/reverse-a-number.test.js\u001b[39m\u001b[0m\u001b[2m:38:56)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mVerify reverse number when number is float no\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m54.032\u001b[39m\n    Received: \u001b[31m76.99999999999886\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 42 | \u001b[39m    \u001b[36mconst\u001b[39m input \u001b[33m=\u001b[39m\u001b[35m230.45\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 43 | \u001b[39m    \u001b[36mconst\u001b[39m expectedoutput \u001b[33m=\u001b[39m \u001b[35m54.032\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 44 | \u001b[39m    expect(reverse\u001b[33m.\u001b[39mreverseNumberTraditionalway(input))\u001b[33m.\u001b[39mtoBe(expectedoutput)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                                       \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 45 | \u001b[39m})\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 46 | \u001b[39mtest(\u001b[32m'Verify reverse number when number is too large(17 digit long)'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 47 | \u001b[39m    \u001b[36mconst\u001b[39m input \u001b[33m=\u001b[39m\u001b[35m12345678901234567\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/test/JS-QAA3/reverse-a-number.test.js\u001b[39m\u001b[0m\u001b[2m:44:56)\u001b[22m\u001b[2m\u001b[22m\n"
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 2,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1600285299406,
        "runtime": 2260,
        "slow": false,
        "start": 1600285297146
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "unmatched": 0,
        "updated": 0,
        "uncheckedKeys": []
      },
      "testFilePath": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\JS-QAA1\\divisible-by-check-03.test.js",
      "testResults": [
        {
          "ancestorTitles": [],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify if no is divisible by 3,5,15",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify if no is divisible by 3,5,15"
        },
        {
          "ancestorTitles": [],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify if number is not divisible by 3,5,15",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify if number is not divisible by 3,5,15"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 4,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1600285299902,
        "runtime": 3199,
        "slow": false,
        "start": 1600285296703
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "unmatched": 0,
        "updated": 0,
        "uncheckedKeys": []
      },
      "testFilePath": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\TS-QAA1\\sumOfArrayElements.test.ts",
      "testResults": [
        {
          "ancestorTitles": [],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify sum of array elements",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify sum of array elements"
        },
        {
          "ancestorTitles": [],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify sum of array elements for empty array",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify sum of array elements for empty array"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify sum of array elements when -ve elements",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify sum of array elements when -ve elements"
        },
        {
          "ancestorTitles": [],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify sum of array elements when float elements",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify sum of array elements when float elements"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 2,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1600285299945,
        "runtime": 2989,
        "slow": false,
        "start": 1600285296956
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "unmatched": 0,
        "updated": 0,
        "uncheckedKeys": []
      },
      "testFilePath": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\TS-QAA1\\foo.test.ts",
      "testResults": [
        {
          "ancestorTitles": [],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "basic",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "basic"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "basic again",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "basic again"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 3,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1600285300407,
        "runtime": 674,
        "slow": false,
        "start": 1600285299733
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "unmatched": 0,
        "updated": 0,
        "uncheckedKeys": []
      },
      "testFilePath": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\JS-QAA4\\factorial-of-number.test.js",
      "testResults": [
        {
          "ancestorTitles": [],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify for positive integer factorial",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify for positive integer factorial"
        },
        {
          "ancestorTitles": [],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "verify for negative integer factorial",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "verify for negative integer factorial"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "verify for zero factorial ",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "verify for zero factorial "
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 8,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1600285300865,
        "runtime": 678,
        "slow": false,
        "start": 1600285300187
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "unmatched": 0,
        "updated": 0,
        "uncheckedKeys": []
      },
      "testFilePath": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\JS-QAA4\\sum-of-array-elements.test.js",
      "testResults": [
        {
          "ancestorTitles": [],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify sum of array elements",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify sum of array elements"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify sum of array elements for empty array",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify sum of array elements for empty array"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify sum of array elements when -ve elements",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify sum of array elements when -ve elements"
        },
        {
          "ancestorTitles": [],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify sum of array elements when float elements",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify sum of array elements when float elements"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify sum of array elements",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify sum of array elements"
        },
        {
          "ancestorTitles": [],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify sum of array elements for empty array",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify sum of array elements for empty array"
        },
        {
          "ancestorTitles": [],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify sum of array elements when -ve elements",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify sum of array elements when -ve elements"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify sum of array elements when float elements",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify sum of array elements when float elements"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 3,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1600285301210,
        "runtime": 1264,
        "slow": false,
        "start": 1600285299946
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "unmatched": 0,
        "updated": 0,
        "uncheckedKeys": []
      },
      "testFilePath": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\TS-QAA1\\factorialOfN.test.ts",
      "testResults": [
        {
          "ancestorTitles": [],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify for positive integer factorial",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify for positive integer factorial"
        },
        {
          "ancestorTitles": [],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "verify for negative integer factorial",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "verify for negative integer factorial"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "verify for zero factorial ",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "verify for zero factorial "
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 3,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1600285301711,
        "runtime": 623,
        "slow": false,
        "start": 1600285301088
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "unmatched": 0,
        "updated": 0,
        "uncheckedKeys": []
      },
      "testFilePath": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\JS-QAA1\\welcome-01.test.js",
      "testResults": [
        {
          "ancestorTitles": [],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify for welcome message with username",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify for welcome message with username"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify for welcome message when username is empty",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify for welcome message when username is empty"
        },
        {
          "ancestorTitles": [],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify for welcome message when username is empty",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify for welcome message when username is empty"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 2,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1600285301952,
        "runtime": 597,
        "slow": false,
        "start": 1600285301355
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "unmatched": 0,
        "updated": 0,
        "uncheckedKeys": []
      },
      "testFilePath": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\JS-QAA2\\object-to-array-conversion.test.js",
      "testResults": [
        {
          "ancestorTitles": [],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify Object conversion to array",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify Object conversion to array"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify Empty Object conversion to array",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify Empty Object conversion to array"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 4,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1600285302321,
        "runtime": 570,
        "slow": false,
        "start": 1600285301751
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "unmatched": 0,
        "updated": 0,
        "uncheckedKeys": []
      },
      "testFilePath": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\JS-QAA3\\palindrome-string-check.test.js",
      "testResults": [
        {
          "ancestorTitles": [],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify if number is palindrome",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify if number is palindrome"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify if number is not a palindrome",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify if number is not a palindrome"
        },
        {
          "ancestorTitles": [],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify if number is palindrome",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify if number is palindrome"
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify if number is not a palindrome",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify if number is not a palindrome"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 5,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1600285302481,
        "runtime": 558,
        "slow": false,
        "start": 1600285301923
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "unmatched": 0,
        "updated": 0,
        "uncheckedKeys": []
      },
      "testFilePath": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\test\\JS-QAA1\\array-smallest-element-02.test.js",
      "testResults": [
        {
          "ancestorTitles": [],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify smallest element of array ",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify smallest element of array "
        },
        {
          "ancestorTitles": [],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify smallest element of array if negative ",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify smallest element of array if negative "
        },
        {
          "ancestorTitles": [],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify smallest element of array if float",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify smallest element of array if float"
        },
        {
          "ancestorTitles": [],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify smallest element of array if string",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify smallest element of array if string"
        },
        {
          "ancestorTitles": [],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Verify smallest element of array if empty array",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Verify smallest element of array if empty array"
        }
      ],
      "failureMessage": null
    }
  ],
  "wasInterrupted": false,
  "coverageMap": {
    "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\JS-QAA2\\animal-leg-counter.js": {
      "path": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\JS-QAA2\\animal-leg-counter.js",
      "statementMap": {
        "0": {
          "start": {
            "line": 1,
            "column": 19
          },
          "end": {
            "line": 6,
            "column": 5
          }
        },
        "1": {
          "start": {
            "line": 8,
            "column": 4
          },
          "end": {
            "line": 8,
            "column": 46
          }
        },
        "2": {
          "start": {
            "line": 13,
            "column": 12
          },
          "end": {
            "line": 13,
            "column": 13
          }
        },
        "3": {
          "start": {
            "line": 14,
            "column": 4
          },
          "end": {
            "line": 22,
            "column": 5
          }
        },
        "4": {
          "start": {
            "line": 16,
            "column": 8
          },
          "end": {
            "line": 21,
            "column": 9
          }
        },
        "5": {
          "start": {
            "line": 17,
            "column": 12
          },
          "end": {
            "line": 17,
            "column": 70
          }
        },
        "6": {
          "start": {
            "line": 19,
            "column": 8
          },
          "end": {
            "line": 19,
            "column": 74
          }
        },
        "7": {
          "start": {
            "line": 20,
            "column": 8
          },
          "end": {
            "line": 20,
            "column": 21
          }
        },
        "8": {
          "start": {
            "line": 23,
            "column": 5
          },
          "end": {
            "line": 23,
            "column": 16
          }
        },
        "9": {
          "start": {
            "line": 26,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 33
          }
        }
      },
      "fnMap": {
        "0": {
          "name": "totalAnimalLegs",
          "decl": {
            "start": {
              "line": 11,
              "column": 12
            },
            "end": {
              "line": 11,
              "column": 27
            }
          },
          "loc": {
            "start": {
              "line": 11,
              "column": 39
            },
            "end": {
              "line": 24,
              "column": 5
            }
          },
          "line": 11
        }
      },
      "branchMap": {
        "0": {
          "loc": {
            "start": {
              "line": 16,
              "column": 8
            },
            "end": {
              "line": 21,
              "column": 9
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 16,
                "column": 8
              },
              "end": {
                "line": 21,
                "column": 9
              }
            },
            {
              "start": {
                "line": 16,
                "column": 8
              },
              "end": {
                "line": 21,
                "column": 9
              }
            }
          ],
          "line": 16
        }
      },
      "s": {
        "0": 1,
        "1": 1,
        "2": 5,
        "3": 5,
        "4": 11,
        "5": 1,
        "6": 10,
        "7": 10,
        "8": 4,
        "9": 1
      },
      "f": {
        "0": 5
      },
      "b": {
        "0": [
          1,
          10
        ]
      },
      "inputSourceMap": null,
      "_coverageSchema": "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      "hash": "77165d630dd65a5aa4a5bf693b3e59236b071f08"
    },
    "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\JS-QAA3\\get-n-element-of-array.js": {
      "path": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\JS-QAA3\\get-n-element-of-array.js",
      "statementMap": {
        "0": {
          "start": {
            "line": 27,
            "column": 4
          },
          "end": {
            "line": 27,
            "column": 35
          }
        },
        "1": {
          "start": {
            "line": 32,
            "column": 20
          },
          "end": {
            "line": 32,
            "column": 22
          }
        },
        "2": {
          "start": {
            "line": 33,
            "column": 10
          },
          "end": {
            "line": 33,
            "column": 11
          }
        },
        "3": {
          "start": {
            "line": 34,
            "column": 8
          },
          "end": {
            "line": 37,
            "column": 9
          }
        },
        "4": {
          "start": {
            "line": 35,
            "column": 12
          },
          "end": {
            "line": 35,
            "column": 37
          }
        },
        "5": {
          "start": {
            "line": 36,
            "column": 12
          },
          "end": {
            "line": 36,
            "column": 16
          }
        },
        "6": {
          "start": {
            "line": 38,
            "column": 8
          },
          "end": {
            "line": 38,
            "column": 25
          }
        },
        "7": {
          "start": {
            "line": 43,
            "column": 20
          },
          "end": {
            "line": 43,
            "column": 22
          }
        },
        "8": {
          "start": {
            "line": 45,
            "column": 4
          },
          "end": {
            "line": 61,
            "column": 1
          }
        },
        "9": {
          "start": {
            "line": 46,
            "column": 8
          },
          "end": {
            "line": 46,
            "column": 18
          }
        },
        "10": {
          "start": {
            "line": 49,
            "column": 4
          },
          "end": {
            "line": 60,
            "column": 5
          }
        },
        "11": {
          "start": {
            "line": 50,
            "column": 8
          },
          "end": {
            "line": 50,
            "column": 18
          }
        },
        "12": {
          "start": {
            "line": 53,
            "column": 23
          },
          "end": {
            "line": 57,
            "column": 15
          }
        },
        "13": {
          "start": {
            "line": 54,
            "column": 8
          },
          "end": {
            "line": 57,
            "column": 9
          }
        },
        "14": {
          "start": {
            "line": 55,
            "column": 12
          },
          "end": {
            "line": 55,
            "column": 41
          }
        },
        "15": {
          "start": {
            "line": 56,
            "column": 12
          },
          "end": {
            "line": 56,
            "column": 32
          }
        },
        "16": {
          "start": {
            "line": 58,
            "column": 4
          },
          "end": {
            "line": 58,
            "column": 18
          }
        },
        "17": {
          "start": {
            "line": 59,
            "column": 4
          },
          "end": {
            "line": 59,
            "column": 21
          }
        },
        "18": {
          "start": {
            "line": 64,
            "column": 0
          },
          "end": {
            "line": 64,
            "column": 43
          }
        },
        "19": {
          "start": {
            "line": 65,
            "column": 0
          },
          "end": {
            "line": 65,
            "column": 45
          }
        },
        "20": {
          "start": {
            "line": 66,
            "column": 0
          },
          "end": {
            "line": 66,
            "column": 44
          }
        }
      },
      "fnMap": {
        "0": {
          "name": "getFirstNElementsUsingSlice",
          "decl": {
            "start": {
              "line": 26,
              "column": 9
            },
            "end": {
              "line": 26,
              "column": 36
            }
          },
          "loc": {
            "start": {
              "line": 26,
              "column": 51
            },
            "end": {
              "line": 28,
              "column": 1
            }
          },
          "line": 26
        },
        "1": {
          "name": "getfirstElementTraditional",
          "decl": {
            "start": {
              "line": 31,
              "column": 9
            },
            "end": {
              "line": 31,
              "column": 35
            }
          },
          "loc": {
            "start": {
              "line": 31,
              "column": 50
            },
            "end": {
              "line": 39,
              "column": 1
            }
          },
          "line": 31
        },
        "2": {
          "name": "getfirstElementRecurssion",
          "decl": {
            "start": {
              "line": 42,
              "column": 9
            },
            "end": {
              "line": 42,
              "column": 34
            }
          },
          "loc": {
            "start": {
              "line": 42,
              "column": 49
            },
            "end": {
              "line": 62,
              "column": 1
            }
          },
          "line": 42
        },
        "3": {
          "name": "(anonymous_3)",
          "decl": {
            "start": {
              "line": 53,
              "column": 23
            },
            "end": {
              "line": 53,
              "column": 24
            }
          },
          "loc": {
            "start": {
              "line": 53,
              "column": 32
            },
            "end": {
              "line": 57,
              "column": 15
            }
          },
          "line": 53
        }
      },
      "branchMap": {
        "0": {
          "loc": {
            "start": {
              "line": 26,
              "column": 44
            },
            "end": {
              "line": 26,
              "column": 49
            }
          },
          "type": "default-arg",
          "locations": [
            {
              "start": {
                "line": 26,
                "column": 48
              },
              "end": {
                "line": 26,
                "column": 49
              }
            }
          ],
          "line": 26
        },
        "1": {
          "loc": {
            "start": {
              "line": 31,
              "column": 43
            },
            "end": {
              "line": 31,
              "column": 48
            }
          },
          "type": "default-arg",
          "locations": [
            {
              "start": {
                "line": 31,
                "column": 47
              },
              "end": {
                "line": 31,
                "column": 48
              }
            }
          ],
          "line": 31
        },
        "2": {
          "loc": {
            "start": {
              "line": 42,
              "column": 42
            },
            "end": {
              "line": 42,
              "column": 47
            }
          },
          "type": "default-arg",
          "locations": [
            {
              "start": {
                "line": 42,
                "column": 46
              },
              "end": {
                "line": 42,
                "column": 47
              }
            }
          ],
          "line": 42
        },
        "3": {
          "loc": {
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 1
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 45,
                "column": 4
              },
              "end": {
                "line": 61,
                "column": 1
              }
            },
            {
              "start": {
                "line": 45,
                "column": 4
              },
              "end": {
                "line": 61,
                "column": 1
              }
            }
          ],
          "line": 45
        },
        "4": {
          "loc": {
            "start": {
              "line": 49,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 49,
                "column": 4
              },
              "end": {
                "line": 60,
                "column": 5
              }
            },
            {
              "start": {
                "line": 49,
                "column": 4
              },
              "end": {
                "line": 60,
                "column": 5
              }
            }
          ],
          "line": 49
        },
        "5": {
          "loc": {
            "start": {
              "line": 54,
              "column": 8
            },
            "end": {
              "line": 57,
              "column": 9
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 54,
                "column": 8
              },
              "end": {
                "line": 57,
                "column": 9
              }
            },
            {
              "start": {
                "line": 54,
                "column": 8
              },
              "end": {
                "line": 57,
                "column": 9
              }
            }
          ],
          "line": 54
        }
      },
      "s": {
        "0": 0,
        "1": 12,
        "2": 12,
        "3": 12,
        "4": 12,
        "5": 12,
        "6": 12,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 1,
        "19": 1,
        "20": 1
      },
      "f": {
        "0": 0,
        "1": 12,
        "2": 0,
        "3": 0
      },
      "b": {
        "0": [
          0
        ],
        "1": [
          6
        ],
        "2": [
          0
        ],
        "3": [
          0,
          0
        ],
        "4": [
          0,
          0
        ],
        "5": [
          0,
          0
        ]
      },
      "inputSourceMap": null,
      "_coverageSchema": "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      "hash": "d595f2a6b8a7428d6d83004b78492c18f1da0c52"
    },
    "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\JS-QAA3\\reverse-a-number.js": {
      "path": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\JS-QAA3\\reverse-a-number.js",
      "statementMap": {
        "0": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 33
          }
        },
        "1": {
          "start": {
            "line": 9,
            "column": 14
          },
          "end": {
            "line": 9,
            "column": 26
          }
        },
        "2": {
          "start": {
            "line": 10,
            "column": 24
          },
          "end": {
            "line": 10,
            "column": 56
          }
        },
        "3": {
          "start": {
            "line": 11,
            "column": 25
          },
          "end": {
            "line": 11,
            "column": 49
          }
        },
        "4": {
          "start": {
            "line": 12,
            "column": 4
          },
          "end": {
            "line": 12,
            "column": 26
          }
        },
        "5": {
          "start": {
            "line": 17,
            "column": 32
          },
          "end": {
            "line": 17,
            "column": 33
          }
        },
        "6": {
          "start": {
            "line": 18,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 12
          }
        },
        "7": {
          "start": {
            "line": 19,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 1
          }
        },
        "8": {
          "start": {
            "line": 20,
            "column": 4
          },
          "end": {
            "line": 20,
            "column": 18
          }
        },
        "9": {
          "start": {
            "line": 21,
            "column": 4
          },
          "end": {
            "line": 21,
            "column": 29
          }
        },
        "10": {
          "start": {
            "line": 22,
            "column": 4
          },
          "end": {
            "line": 22,
            "column": 43
          }
        },
        "11": {
          "start": {
            "line": 24,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 22
          }
        },
        "12": {
          "start": {
            "line": 27,
            "column": 0
          },
          "end": {
            "line": 27,
            "column": 64
          }
        }
      },
      "fnMap": {
        "0": {
          "name": "reversedNumber",
          "decl": {
            "start": {
              "line": 8,
              "column": 9
            },
            "end": {
              "line": 8,
              "column": 23
            }
          },
          "loc": {
            "start": {
              "line": 8,
              "column": 27
            },
            "end": {
              "line": 13,
              "column": 1
            }
          },
          "line": 8
        },
        "1": {
          "name": "reverseNumberTraditionalway",
          "decl": {
            "start": {
              "line": 16,
              "column": 9
            },
            "end": {
              "line": 16,
              "column": 36
            }
          },
          "loc": {
            "start": {
              "line": 16,
              "column": 45
            },
            "end": {
              "line": 25,
              "column": 1
            }
          },
          "line": 16
        }
      },
      "branchMap": {},
      "s": {
        "0": 1,
        "1": 5,
        "2": 5,
        "3": 5,
        "4": 5,
        "5": 4,
        "6": 4,
        "7": 4,
        "8": 28,
        "9": 28,
        "10": 28,
        "11": 4,
        "12": 1
      },
      "f": {
        "0": 5,
        "1": 4
      },
      "b": {},
      "inputSourceMap": null,
      "_coverageSchema": "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      "hash": "efcdbe41aa9667e9c8a894ab048c1cf9af2d2ada"
    },
    "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\JS-QAA1\\divisible-by-check-03.js": {
      "path": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\JS-QAA1\\divisible-by-check-03.js",
      "statementMap": {
        "0": {
          "start": {
            "line": 7,
            "column": 15
          },
          "end": {
            "line": 7,
            "column": 29
          }
        },
        "1": {
          "start": {
            "line": 8,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 40
          }
        },
        "2": {
          "start": {
            "line": 12,
            "column": 21
          },
          "end": {
            "line": 12,
            "column": 23
          }
        },
        "3": {
          "start": {
            "line": 13,
            "column": 4
          },
          "end": {
            "line": 27,
            "column": 5
          }
        },
        "4": {
          "start": {
            "line": 13,
            "column": 14
          },
          "end": {
            "line": 13,
            "column": 15
          }
        },
        "5": {
          "start": {
            "line": 14,
            "column": 7
          },
          "end": {
            "line": 26,
            "column": 9
          }
        },
        "6": {
          "start": {
            "line": 15,
            "column": 12
          },
          "end": {
            "line": 15,
            "column": 63
          }
        },
        "7": {
          "start": {
            "line": 17,
            "column": 15
          },
          "end": {
            "line": 26,
            "column": 9
          }
        },
        "8": {
          "start": {
            "line": 18,
            "column": 12
          },
          "end": {
            "line": 18,
            "column": 62
          }
        },
        "9": {
          "start": {
            "line": 20,
            "column": 14
          },
          "end": {
            "line": 26,
            "column": 9
          }
        },
        "10": {
          "start": {
            "line": 21,
            "column": 12
          },
          "end": {
            "line": 21,
            "column": 62
          }
        },
        "11": {
          "start": {
            "line": 24,
            "column": 12
          },
          "end": {
            "line": 24,
            "column": 79
          }
        },
        "12": {
          "start": {
            "line": 28,
            "column": 4
          },
          "end": {
            "line": 28,
            "column": 23
          }
        },
        "13": {
          "start": {
            "line": 31,
            "column": 0
          },
          "end": {
            "line": 31,
            "column": 33
          }
        }
      },
      "fnMap": {
        "0": {
          "name": "divisibleByCheck",
          "decl": {
            "start": {
              "line": 11,
              "column": 9
            },
            "end": {
              "line": 11,
              "column": 25
            }
          },
          "loc": {
            "start": {
              "line": 11,
              "column": 36
            },
            "end": {
              "line": 29,
              "column": 1
            }
          },
          "line": 11
        }
      },
      "branchMap": {
        "0": {
          "loc": {
            "start": {
              "line": 14,
              "column": 7
            },
            "end": {
              "line": 26,
              "column": 9
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 14,
                "column": 7
              },
              "end": {
                "line": 26,
                "column": 9
              }
            },
            {
              "start": {
                "line": 14,
                "column": 7
              },
              "end": {
                "line": 26,
                "column": 9
              }
            }
          ],
          "line": 14
        },
        "1": {
          "loc": {
            "start": {
              "line": 14,
              "column": 10
            },
            "end": {
              "line": 14,
              "column": 54
            }
          },
          "type": "binary-expr",
          "locations": [
            {
              "start": {
                "line": 14,
                "column": 10
              },
              "end": {
                "line": 14,
                "column": 30
              }
            },
            {
              "start": {
                "line": 14,
                "column": 34
              },
              "end": {
                "line": 14,
                "column": 54
              }
            }
          ],
          "line": 14
        },
        "2": {
          "loc": {
            "start": {
              "line": 17,
              "column": 15
            },
            "end": {
              "line": 26,
              "column": 9
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 17,
                "column": 15
              },
              "end": {
                "line": 26,
                "column": 9
              }
            },
            {
              "start": {
                "line": 17,
                "column": 15
              },
              "end": {
                "line": 26,
                "column": 9
              }
            }
          ],
          "line": 17
        },
        "3": {
          "loc": {
            "start": {
              "line": 20,
              "column": 14
            },
            "end": {
              "line": 26,
              "column": 9
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 20,
                "column": 14
              },
              "end": {
                "line": 26,
                "column": 9
              }
            },
            {
              "start": {
                "line": 20,
                "column": 14
              },
              "end": {
                "line": 26,
                "column": 9
              }
            }
          ],
          "line": 20
        }
      },
      "s": {
        "0": 1,
        "1": 1,
        "2": 3,
        "3": 3,
        "4": 3,
        "5": 10,
        "6": 2,
        "7": 8,
        "8": 3,
        "9": 5,
        "10": 4,
        "11": 1,
        "12": 3,
        "13": 1
      },
      "f": {
        "0": 3
      },
      "b": {
        "0": [
          2,
          8
        ],
        "1": [
          10,
          6
        ],
        "2": [
          3,
          5
        ],
        "3": [
          4,
          1
        ]
      },
      "inputSourceMap": null,
      "_coverageSchema": "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      "hash": "e23c21982dc4330d9ce446c81560df09edc1af56"
    },
    "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\TS-QAA1\\sumOfArrayElements.ts": {
      "path": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\TS-QAA1\\sumOfArrayElements.ts",
      "statementMap": {
        "0": {
          "start": {
            "line": 1,
            "column": 26
          },
          "end": {
            "line": 1,
            "column": 41
          }
        },
        "1": {
          "start": {
            "line": 7,
            "column": 13
          },
          "end": {
            "line": 14,
            "column": null
          }
        },
        "2": {
          "start": {
            "line": 8,
            "column": 4
          },
          "end": {
            "line": 13,
            "column": null
          }
        },
        "3": {
          "start": {
            "line": 9,
            "column": 8
          },
          "end": {
            "line": 9,
            "column": 17
          }
        },
        "4": {
          "start": {
            "line": 11,
            "column": 42
          },
          "end": {
            "line": 11,
            "column": 114
          }
        },
        "5": {
          "start": {
            "line": 11,
            "column": 84
          },
          "end": {
            "line": 11,
            "column": 110
          }
        },
        "6": {
          "start": {
            "line": 12,
            "column": 4
          },
          "end": {
            "line": 12,
            "column": 35
          }
        }
      },
      "fnMap": {
        "0": {
          "name": "(anonymous_0)",
          "decl": {
            "start": {
              "line": 7,
              "column": 52
            },
            "end": {
              "line": 7,
              "column": 53
            }
          },
          "loc": {
            "start": {
              "line": 7,
              "column": 71
            },
            "end": {
              "line": 14,
              "column": 1
            }
          }
        },
        "1": {
          "name": "(anonymous_1)",
          "decl": {
            "start": {
              "line": 11,
              "column": 58
            },
            "end": {
              "line": 11,
              "column": 59
            }
          },
          "loc": {
            "start": {
              "line": 11,
              "column": 76
            },
            "end": {
              "line": 11,
              "column": 110
            }
          }
        }
      },
      "branchMap": {
        "0": {
          "loc": {
            "start": {
              "line": 8,
              "column": 4
            },
            "end": {
              "line": 13,
              "column": null
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 8,
                "column": 4
              },
              "end": {
                "line": 13,
                "column": null
              }
            },
            {
              "start": {
                "line": 8,
                "column": 4
              },
              "end": {
                "line": 13,
                "column": null
              }
            }
          ]
        }
      },
      "s": {
        "0": 1,
        "1": 1,
        "2": 4,
        "3": 1,
        "4": 3,
        "5": 15,
        "6": 3
      },
      "f": {
        "0": 4,
        "1": 15
      },
      "b": {
        "0": [
          1,
          3
        ]
      }
    },
    "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\TS-QAA1\\foo.ts": {
      "path": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\TS-QAA1\\foo.ts",
      "statementMap": {
        "0": {
          "start": {
            "line": 1,
            "column": 13
          },
          "end": {
            "line": 3,
            "column": 43
          }
        },
        "1": {
          "start": {
            "line": 2,
            "column": 7
          },
          "end": {
            "line": 2,
            "column": 21
          }
        },
        "2": {
          "start": {
            "line": 3,
            "column": 6
          },
          "end": {
            "line": 3,
            "column": 43
          }
        },
        "3": {
          "start": {
            "line": 3,
            "column": 29
          },
          "end": {
            "line": 3,
            "column": 40
          }
        }
      },
      "fnMap": {
        "0": {
          "name": "(anonymous_0)",
          "decl": {
            "start": {
              "line": 2,
              "column": 6
            },
            "end": {
              "line": 2,
              "column": 7
            }
          },
          "loc": {
            "start": {
              "line": 2,
              "column": 6
            },
            "end": {
              "line": 3,
              "column": 7
            }
          }
        },
        "1": {
          "name": "(anonymous_1)",
          "decl": {
            "start": {
              "line": 3,
              "column": 15
            },
            "end": {
              "line": 3,
              "column": 16
            }
          },
          "loc": {
            "start": {
              "line": 3,
              "column": 24
            },
            "end": {
              "line": 3,
              "column": 32
            }
          }
        }
      },
      "branchMap": {},
      "s": {
        "0": 1,
        "1": 6,
        "2": 2,
        "3": 2
      },
      "f": {
        "0": 2,
        "1": 2
      },
      "b": {}
    },
    "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\JS-QAA4\\factorial-of-number.js": {
      "path": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\JS-QAA4\\factorial-of-number.js",
      "statementMap": {
        "0": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 35
          }
        },
        "1": {
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 26
          }
        },
        "2": {
          "start": {
            "line": 8,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 27
          }
        },
        "3": {
          "start": {
            "line": 12,
            "column": 26
          },
          "end": {
            "line": 12,
            "column": 27
          }
        },
        "4": {
          "start": {
            "line": 13,
            "column": 4
          },
          "end": {
            "line": 22,
            "column": 5
          }
        },
        "5": {
          "start": {
            "line": 14,
            "column": 8
          },
          "end": {
            "line": 14,
            "column": 32
          }
        },
        "6": {
          "start": {
            "line": 15,
            "column": 11
          },
          "end": {
            "line": 22,
            "column": 5
          }
        },
        "7": {
          "start": {
            "line": 16,
            "column": 8
          },
          "end": {
            "line": 16,
            "column": 41
          }
        },
        "8": {
          "start": {
            "line": 18,
            "column": 8
          },
          "end": {
            "line": 20,
            "column": 9
          }
        },
        "9": {
          "start": {
            "line": 18,
            "column": 19
          },
          "end": {
            "line": 18,
            "column": 20
          }
        },
        "10": {
          "start": {
            "line": 19,
            "column": 12
          },
          "end": {
            "line": 19,
            "column": 51
          }
        },
        "11": {
          "start": {
            "line": 21,
            "column": 8
          },
          "end": {
            "line": 21,
            "column": 32
          }
        },
        "12": {
          "start": {
            "line": 27,
            "column": 4
          },
          "end": {
            "line": 33,
            "column": 14
          }
        },
        "13": {
          "start": {
            "line": 28,
            "column": 8
          },
          "end": {
            "line": 28,
            "column": 17
          }
        },
        "14": {
          "start": {
            "line": 29,
            "column": 11
          },
          "end": {
            "line": 33,
            "column": 14
          }
        },
        "15": {
          "start": {
            "line": 30,
            "column": 8
          },
          "end": {
            "line": 30,
            "column": 41
          }
        },
        "16": {
          "start": {
            "line": 32,
            "column": 8
          },
          "end": {
            "line": 32,
            "column": 34
          }
        },
        "17": {
          "start": {
            "line": 38,
            "column": 4
          },
          "end": {
            "line": 52,
            "column": 5
          }
        },
        "18": {
          "start": {
            "line": 39,
            "column": 8
          },
          "end": {
            "line": 39,
            "column": 38
          }
        },
        "19": {
          "start": {
            "line": 41,
            "column": 8
          },
          "end": {
            "line": 51,
            "column": 9
          }
        },
        "20": {
          "start": {
            "line": 42,
            "column": 12
          },
          "end": {
            "line": 42,
            "column": 26
          }
        },
        "21": {
          "start": {
            "line": 44,
            "column": 20
          },
          "end": {
            "line": 44,
            "column": 21
          }
        },
        "22": {
          "start": {
            "line": 45,
            "column": 33
          },
          "end": {
            "line": 45,
            "column": 34
          }
        },
        "23": {
          "start": {
            "line": 46,
            "column": 12
          },
          "end": {
            "line": 49,
            "column": 13
          }
        },
        "24": {
          "start": {
            "line": 47,
            "column": 16
          },
          "end": {
            "line": 47,
            "column": 56
          }
        },
        "25": {
          "start": {
            "line": 48,
            "column": 16
          },
          "end": {
            "line": 48,
            "column": 20
          }
        },
        "26": {
          "start": {
            "line": 50,
            "column": 12
          },
          "end": {
            "line": 50,
            "column": 42
          }
        },
        "27": {
          "start": {
            "line": 55,
            "column": 0
          },
          "end": {
            "line": 55,
            "column": 26
          }
        }
      },
      "fnMap": {
        "0": {
          "name": "iterativeFactorial",
          "decl": {
            "start": {
              "line": 11,
              "column": 9
            },
            "end": {
              "line": 11,
              "column": 27
            }
          },
          "loc": {
            "start": {
              "line": 11,
              "column": 31
            },
            "end": {
              "line": 23,
              "column": 1
            }
          },
          "line": 11
        },
        "1": {
          "name": "factorial",
          "decl": {
            "start": {
              "line": 26,
              "column": 9
            },
            "end": {
              "line": 26,
              "column": 18
            }
          },
          "loc": {
            "start": {
              "line": 26,
              "column": 22
            },
            "end": {
              "line": 34,
              "column": 1
            }
          },
          "line": 26
        },
        "2": {
          "name": "factorialWithWhileLoop",
          "decl": {
            "start": {
              "line": 37,
              "column": 9
            },
            "end": {
              "line": 37,
              "column": 31
            }
          },
          "loc": {
            "start": {
              "line": 37,
              "column": 34
            },
            "end": {
              "line": 53,
              "column": 1
            }
          },
          "line": 37
        }
      },
      "branchMap": {
        "0": {
          "loc": {
            "start": {
              "line": 13,
              "column": 4
            },
            "end": {
              "line": 22,
              "column": 5
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 13,
                "column": 4
              },
              "end": {
                "line": 22,
                "column": 5
              }
            },
            {
              "start": {
                "line": 13,
                "column": 4
              },
              "end": {
                "line": 22,
                "column": 5
              }
            }
          ],
          "line": 13
        },
        "1": {
          "loc": {
            "start": {
              "line": 13,
              "column": 8
            },
            "end": {
              "line": 13,
              "column": 25
            }
          },
          "type": "binary-expr",
          "locations": [
            {
              "start": {
                "line": 13,
                "column": 8
              },
              "end": {
                "line": 13,
                "column": 14
              }
            },
            {
              "start": {
                "line": 13,
                "column": 18
              },
              "end": {
                "line": 13,
                "column": 25
              }
            }
          ],
          "line": 13
        },
        "2": {
          "loc": {
            "start": {
              "line": 15,
              "column": 11
            },
            "end": {
              "line": 22,
              "column": 5
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 15,
                "column": 11
              },
              "end": {
                "line": 22,
                "column": 5
              }
            },
            {
              "start": {
                "line": 15,
                "column": 11
              },
              "end": {
                "line": 22,
                "column": 5
              }
            }
          ],
          "line": 15
        },
        "3": {
          "loc": {
            "start": {
              "line": 27,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 14
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 27,
                "column": 4
              },
              "end": {
                "line": 33,
                "column": 14
              }
            },
            {
              "start": {
                "line": 27,
                "column": 4
              },
              "end": {
                "line": 33,
                "column": 14
              }
            }
          ],
          "line": 27
        },
        "4": {
          "loc": {
            "start": {
              "line": 27,
              "column": 8
            },
            "end": {
              "line": 27,
              "column": 27
            }
          },
          "type": "binary-expr",
          "locations": [
            {
              "start": {
                "line": 27,
                "column": 8
              },
              "end": {
                "line": 27,
                "column": 15
              }
            },
            {
              "start": {
                "line": 27,
                "column": 20
              },
              "end": {
                "line": 27,
                "column": 27
              }
            }
          ],
          "line": 27
        },
        "5": {
          "loc": {
            "start": {
              "line": 29,
              "column": 11
            },
            "end": {
              "line": 33,
              "column": 14
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 29,
                "column": 11
              },
              "end": {
                "line": 33,
                "column": 14
              }
            },
            {
              "start": {
                "line": 29,
                "column": 11
              },
              "end": {
                "line": 33,
                "column": 14
              }
            }
          ],
          "line": 29
        },
        "6": {
          "loc": {
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 52,
              "column": 5
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 38,
                "column": 4
              },
              "end": {
                "line": 52,
                "column": 5
              }
            },
            {
              "start": {
                "line": 38,
                "column": 4
              },
              "end": {
                "line": 52,
                "column": 5
              }
            }
          ],
          "line": 38
        },
        "7": {
          "loc": {
            "start": {
              "line": 41,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 41,
                "column": 8
              },
              "end": {
                "line": 51,
                "column": 9
              }
            },
            {
              "start": {
                "line": 41,
                "column": 8
              },
              "end": {
                "line": 51,
                "column": 9
              }
            }
          ],
          "line": 41
        }
      },
      "s": {
        "0": 1,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 0,
        "6": 1,
        "7": 0,
        "8": 1,
        "9": 1,
        "10": 5,
        "11": 1,
        "12": 12,
        "13": 3,
        "14": 9,
        "15": 1,
        "16": 8,
        "17": 1,
        "18": 1,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0,
        "24": 0,
        "25": 0,
        "26": 0,
        "27": 1
      },
      "f": {
        "0": 1,
        "1": 12,
        "2": 1
      },
      "b": {
        "0": [
          0,
          1
        ],
        "1": [
          1,
          1
        ],
        "2": [
          0,
          1
        ],
        "3": [
          3,
          9
        ],
        "4": [
          12,
          11
        ],
        "5": [
          1,
          8
        ],
        "6": [
          1,
          0
        ],
        "7": [
          0,
          0
        ]
      },
      "inputSourceMap": null,
      "_coverageSchema": "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      "hash": "b6fc8820e209badf333058b09dd5d5386d697c4b"
    },
    "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\JS-QAA4\\sum-of-array-elements.js": {
      "path": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\JS-QAA4\\sum-of-array-elements.js",
      "statementMap": {
        "0": {
          "start": {
            "line": 10,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 1
          }
        },
        "1": {
          "start": {
            "line": 11,
            "column": 4
          },
          "end": {
            "line": 11,
            "column": 44
          }
        },
        "2": {
          "start": {
            "line": 13,
            "column": 30
          },
          "end": {
            "line": 14,
            "column": 32
          }
        },
        "3": {
          "start": {
            "line": 14,
            "column": 3
          },
          "end": {
            "line": 14,
            "column": 28
          }
        },
        "4": {
          "start": {
            "line": 15,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 31
          }
        },
        "5": {
          "start": {
            "line": 21,
            "column": 24
          },
          "end": {
            "line": 21,
            "column": 25
          }
        },
        "6": {
          "start": {
            "line": 22,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 1
          }
        },
        "7": {
          "start": {
            "line": 22,
            "column": 11
          },
          "end": {
            "line": 22,
            "column": 12
          }
        },
        "8": {
          "start": {
            "line": 23,
            "column": 4
          },
          "end": {
            "line": 23,
            "column": 38
          }
        },
        "9": {
          "start": {
            "line": 25,
            "column": 4
          },
          "end": {
            "line": 25,
            "column": 30
          }
        },
        "10": {
          "start": {
            "line": 28,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 36
          }
        },
        "11": {
          "start": {
            "line": 29,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 37
          }
        }
      },
      "fnMap": {
        "0": {
          "name": "sumOfArrayElements",
          "decl": {
            "start": {
              "line": 9,
              "column": 9
            },
            "end": {
              "line": 9,
              "column": 27
            }
          },
          "loc": {
            "start": {
              "line": 9,
              "column": 38
            },
            "end": {
              "line": 17,
              "column": 1
            }
          },
          "line": 9
        },
        "1": {
          "name": "(anonymous_1)",
          "decl": {
            "start": {
              "line": 13,
              "column": 46
            },
            "end": {
              "line": 13,
              "column": 47
            }
          },
          "loc": {
            "start": {
              "line": 14,
              "column": 1
            },
            "end": {
              "line": 14,
              "column": 29
            }
          },
          "line": 14
        },
        "2": {
          "name": "sumOfArrayElements1",
          "decl": {
            "start": {
              "line": 20,
              "column": 9
            },
            "end": {
              "line": 20,
              "column": 28
            }
          },
          "loc": {
            "start": {
              "line": 20,
              "column": 38
            },
            "end": {
              "line": 26,
              "column": 1
            }
          },
          "line": 20
        }
      },
      "branchMap": {
        "0": {
          "loc": {
            "start": {
              "line": 10,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 1
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 10,
                "column": 0
              },
              "end": {
                "line": 16,
                "column": 1
              }
            },
            {
              "start": {
                "line": 10,
                "column": 0
              },
              "end": {
                "line": 16,
                "column": 1
              }
            }
          ],
          "line": 10
        }
      },
      "s": {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 8,
        "6": 8,
        "7": 8,
        "8": 30,
        "9": 8,
        "10": 1,
        "11": 1
      },
      "f": {
        "0": 0,
        "1": 0,
        "2": 8
      },
      "b": {
        "0": [
          0,
          0
        ]
      },
      "inputSourceMap": null,
      "_coverageSchema": "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      "hash": "0891ee88d7a66137b27f9e7d7a4fc9c8db5e7bc6"
    },
    "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\TS-QAA1\\factorialOfN.ts": {
      "path": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\TS-QAA1\\factorialOfN.ts",
      "statementMap": {
        "0": {
          "start": {
            "line": 2,
            "column": 13
          },
          "end": {
            "line": 18,
            "column": null
          }
        },
        "1": {
          "start": {
            "line": 3,
            "column": 4
          },
          "end": {
            "line": 17,
            "column": null
          }
        },
        "2": {
          "start": {
            "line": 4,
            "column": 8
          },
          "end": {
            "line": 4,
            "column": 47
          }
        },
        "3": {
          "start": {
            "line": 6,
            "column": 8
          },
          "end": {
            "line": 16,
            "column": null
          }
        },
        "4": {
          "start": {
            "line": 7,
            "column": 12
          },
          "end": {
            "line": 7,
            "column": 21
          }
        },
        "5": {
          "start": {
            "line": 9,
            "column": 20
          },
          "end": {
            "line": 9,
            "column": 21
          }
        },
        "6": {
          "start": {
            "line": 10,
            "column": 43
          },
          "end": {
            "line": 10,
            "column": 44
          }
        },
        "7": {
          "start": {
            "line": 11,
            "column": 12
          },
          "end": {
            "line": 14,
            "column": null
          }
        },
        "8": {
          "start": {
            "line": 12,
            "column": 16
          },
          "end": {
            "line": 12,
            "column": 56
          }
        },
        "9": {
          "start": {
            "line": 13,
            "column": 16
          },
          "end": {
            "line": 13,
            "column": 20
          }
        },
        "10": {
          "start": {
            "line": 15,
            "column": 12
          },
          "end": {
            "line": 15,
            "column": 36
          }
        }
      },
      "fnMap": {
        "0": {
          "name": "(anonymous_0)",
          "decl": {
            "start": {
              "line": 2,
              "column": 35
            },
            "end": {
              "line": 2,
              "column": 36
            }
          },
          "loc": {
            "start": {
              "line": 2,
              "column": 45
            },
            "end": {
              "line": 18,
              "column": 1
            }
          }
        }
      },
      "branchMap": {
        "0": {
          "loc": {
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 17,
              "column": null
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 17,
                "column": null
              }
            },
            {
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 17,
                "column": null
              }
            }
          ]
        },
        "1": {
          "loc": {
            "start": {
              "line": 6,
              "column": 8
            },
            "end": {
              "line": 16,
              "column": null
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 6,
                "column": 8
              },
              "end": {
                "line": 16,
                "column": null
              }
            },
            {
              "start": {
                "line": 6,
                "column": 8
              },
              "end": {
                "line": 16,
                "column": null
              }
            }
          ]
        }
      },
      "s": {
        "0": 1,
        "1": 3,
        "2": 1,
        "3": 2,
        "4": 1,
        "5": 1,
        "6": 1,
        "7": 1,
        "8": 5,
        "9": 5,
        "10": 1
      },
      "f": {
        "0": 3
      },
      "b": {
        "0": [
          1,
          2
        ],
        "1": [
          1,
          1
        ]
      }
    },
    "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\JS-QAA1\\welcome-01.js": {
      "path": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\JS-QAA1\\welcome-01.js",
      "statementMap": {
        "0": {
          "start": {
            "line": 6,
            "column": 4
          },
          "end": {
            "line": 6,
            "column": 40
          }
        },
        "1": {
          "start": {
            "line": 9,
            "column": 12
          },
          "end": {
            "line": 9,
            "column": 21
          }
        },
        "2": {
          "start": {
            "line": 10,
            "column": 5
          },
          "end": {
            "line": 10,
            "column": 40
          }
        },
        "3": {
          "start": {
            "line": 11,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 32
          }
        }
      },
      "fnMap": {
        "0": {
          "name": "welcomeMessage",
          "decl": {
            "start": {
              "line": 5,
              "column": 9
            },
            "end": {
              "line": 5,
              "column": 23
            }
          },
          "loc": {
            "start": {
              "line": 5,
              "column": 30
            },
            "end": {
              "line": 7,
              "column": 5
            }
          },
          "line": 5
        }
      },
      "branchMap": {},
      "s": {
        "0": 4,
        "1": 1,
        "2": 1,
        "3": 1
      },
      "f": {
        "0": 4
      },
      "b": {},
      "inputSourceMap": null,
      "_coverageSchema": "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      "hash": "ebcc8d057f04b496ce3854f0131746b31705f565"
    },
    "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\JS-QAA2\\object-to-array-conversion.js": {
      "path": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\JS-QAA2\\object-to-array-conversion.js",
      "statementMap": {
        "0": {
          "start": {
            "line": 14,
            "column": 5
          },
          "end": {
            "line": 20,
            "column": 6
          }
        },
        "1": {
          "start": {
            "line": 15,
            "column": 24
          },
          "end": {
            "line": 15,
            "column": 47
          }
        },
        "2": {
          "start": {
            "line": 16,
            "column": 9
          },
          "end": {
            "line": 16,
            "column": 23
          }
        },
        "3": {
          "start": {
            "line": 18,
            "column": 22
          },
          "end": {
            "line": 18,
            "column": 45
          }
        },
        "4": {
          "start": {
            "line": 19,
            "column": 9
          },
          "end": {
            "line": 19,
            "column": 23
          }
        },
        "5": {
          "start": {
            "line": 23,
            "column": 1
          },
          "end": {
            "line": 23,
            "column": 41
          }
        }
      },
      "fnMap": {
        "0": {
          "name": "objectToArrayConersion",
          "decl": {
            "start": {
              "line": 13,
              "column": 10
            },
            "end": {
              "line": 13,
              "column": 32
            }
          },
          "loc": {
            "start": {
              "line": 13,
              "column": 42
            },
            "end": {
              "line": 21,
              "column": 2
            }
          },
          "line": 13
        }
      },
      "branchMap": {
        "0": {
          "loc": {
            "start": {
              "line": 14,
              "column": 5
            },
            "end": {
              "line": 20,
              "column": 6
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 14,
                "column": 5
              },
              "end": {
                "line": 20,
                "column": 6
              }
            },
            {
              "start": {
                "line": 14,
                "column": 5
              },
              "end": {
                "line": 20,
                "column": 6
              }
            }
          ],
          "line": 14
        }
      },
      "s": {
        "0": 2,
        "1": 1,
        "2": 1,
        "3": 1,
        "4": 1,
        "5": 1
      },
      "f": {
        "0": 2
      },
      "b": {
        "0": [
          1,
          1
        ]
      },
      "inputSourceMap": null,
      "_coverageSchema": "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      "hash": "77c1e682c925a15591959e988edd09339bfc2985"
    },
    "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\JS-QAA3\\palindrome-string-check.js": {
      "path": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\JS-QAA3\\palindrome-string-check.js",
      "statementMap": {
        "0": {
          "start": {
            "line": 13,
            "column": 14
          },
          "end": {
            "line": 13,
            "column": 29
          }
        },
        "1": {
          "start": {
            "line": 14,
            "column": 4
          },
          "end": {
            "line": 14,
            "column": 46
          }
        },
        "2": {
          "start": {
            "line": 15,
            "column": 22
          },
          "end": {
            "line": 15,
            "column": 35
          }
        },
        "3": {
          "start": {
            "line": 16,
            "column": 11
          },
          "end": {
            "line": 16,
            "column": 29
          }
        },
        "4": {
          "start": {
            "line": 17,
            "column": 10
          },
          "end": {
            "line": 17,
            "column": 11
          }
        },
        "5": {
          "start": {
            "line": 18,
            "column": 4
          },
          "end": {
            "line": 25,
            "column": 5
          }
        },
        "6": {
          "start": {
            "line": 19,
            "column": 8
          },
          "end": {
            "line": 23,
            "column": 13
          }
        },
        "7": {
          "start": {
            "line": 20,
            "column": 12
          },
          "end": {
            "line": 20,
            "column": 32
          }
        },
        "8": {
          "start": {
            "line": 22,
            "column": 12
          },
          "end": {
            "line": 22,
            "column": 36
          }
        },
        "9": {
          "start": {
            "line": 24,
            "column": 8
          },
          "end": {
            "line": 24,
            "column": 12
          }
        },
        "10": {
          "start": {
            "line": 32,
            "column": 14
          },
          "end": {
            "line": 32,
            "column": 29
          }
        },
        "11": {
          "start": {
            "line": 33,
            "column": 26
          },
          "end": {
            "line": 33,
            "column": 61
          }
        },
        "12": {
          "start": {
            "line": 35,
            "column": 25
          },
          "end": {
            "line": 35,
            "column": 69
          }
        },
        "13": {
          "start": {
            "line": 37,
            "column": 4
          },
          "end": {
            "line": 41,
            "column": 5
          }
        },
        "14": {
          "start": {
            "line": 38,
            "column": 8
          },
          "end": {
            "line": 38,
            "column": 28
          }
        },
        "15": {
          "start": {
            "line": 40,
            "column": 8
          },
          "end": {
            "line": 40,
            "column": 32
          }
        },
        "16": {
          "start": {
            "line": 45,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 32
          }
        },
        "17": {
          "start": {
            "line": 46,
            "column": 0
          },
          "end": {
            "line": 46,
            "column": 38
          }
        }
      },
      "fnMap": {
        "0": {
          "name": "checkPalindrome",
          "decl": {
            "start": {
              "line": 11,
              "column": 9
            },
            "end": {
              "line": 11,
              "column": 24
            }
          },
          "loc": {
            "start": {
              "line": 11,
              "column": 29
            },
            "end": {
              "line": 26,
              "column": 1
            }
          },
          "line": 11
        },
        "1": {
          "name": "checkStringPalindrome",
          "decl": {
            "start": {
              "line": 30,
              "column": 9
            },
            "end": {
              "line": 30,
              "column": 30
            }
          },
          "loc": {
            "start": {
              "line": 30,
              "column": 35
            },
            "end": {
              "line": 42,
              "column": 1
            }
          },
          "line": 30
        }
      },
      "branchMap": {
        "0": {
          "loc": {
            "start": {
              "line": 19,
              "column": 8
            },
            "end": {
              "line": 23,
              "column": 13
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 19,
                "column": 8
              },
              "end": {
                "line": 23,
                "column": 13
              }
            },
            {
              "start": {
                "line": 19,
                "column": 8
              },
              "end": {
                "line": 23,
                "column": 13
              }
            }
          ],
          "line": 19
        },
        "1": {
          "loc": {
            "start": {
              "line": 37,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 37,
                "column": 4
              },
              "end": {
                "line": 41,
                "column": 5
              }
            },
            {
              "start": {
                "line": 37,
                "column": 4
              },
              "end": {
                "line": 41,
                "column": 5
              }
            }
          ],
          "line": 37
        }
      },
      "s": {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 4,
        "11": 4,
        "12": 4,
        "13": 4,
        "14": 2,
        "15": 2,
        "16": 1,
        "17": 1
      },
      "f": {
        "0": 0,
        "1": 4
      },
      "b": {
        "0": [
          0,
          0
        ],
        "1": [
          2,
          2
        ]
      },
      "inputSourceMap": null,
      "_coverageSchema": "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      "hash": "24ef48562db9d2afde813956d81bfe797d90e4b1"
    },
    "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\JS-QAA1\\array-smallest-element-02.js": {
      "path": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\src\\code\\JS-QAA1\\array-smallest-element-02.js",
      "statementMap": {
        "0": {
          "start": {
            "line": 15,
            "column": 25
          },
          "end": {
            "line": 15,
            "column": 33
          }
        },
        "1": {
          "start": {
            "line": 16,
            "column": 4
          },
          "end": {
            "line": 19,
            "column": 5
          }
        },
        "2": {
          "start": {
            "line": 16,
            "column": 15
          },
          "end": {
            "line": 16,
            "column": 16
          }
        },
        "3": {
          "start": {
            "line": 17,
            "column": 19
          },
          "end": {
            "line": 17,
            "column": 27
          }
        },
        "4": {
          "start": {
            "line": 18,
            "column": 8
          },
          "end": {
            "line": 18,
            "column": 74
          }
        },
        "5": {
          "start": {
            "line": 20,
            "column": 4
          },
          "end": {
            "line": 20,
            "column": 26
          }
        },
        "6": {
          "start": {
            "line": 23,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 35
          }
        }
      },
      "fnMap": {
        "0": {
          "name": "getSmallestElement",
          "decl": {
            "start": {
              "line": 14,
              "column": 9
            },
            "end": {
              "line": 14,
              "column": 27
            }
          },
          "loc": {
            "start": {
              "line": 14,
              "column": 35
            },
            "end": {
              "line": 21,
              "column": 1
            }
          },
          "line": 14
        }
      },
      "branchMap": {
        "0": {
          "loc": {
            "start": {
              "line": 18,
              "column": 25
            },
            "end": {
              "line": 18,
              "column": 73
            }
          },
          "type": "cond-expr",
          "locations": [
            {
              "start": {
                "line": 18,
                "column": 52
              },
              "end": {
                "line": 18,
                "column": 57
              }
            },
            {
              "start": {
                "line": 18,
                "column": 59
              },
              "end": {
                "line": 18,
                "column": 73
              }
            }
          ],
          "line": 18
        }
      },
      "s": {
        "0": 5,
        "1": 5,
        "2": 5,
        "3": 17,
        "4": 17,
        "5": 5,
        "6": 1
      },
      "f": {
        "0": 5
      },
      "b": {
        "0": [
          2,
          15
        ]
      },
      "inputSourceMap": null,
      "_coverageSchema": "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      "hash": "f964b2e211be117d063994ed910128cbcd34aa24"
    }
  },
  "config": {
    "bail": 0,
    "changedFilesWithAncestor": false,
    "collectCoverage": true,
    "collectCoverageFrom": [],
    "coverageDirectory": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\coverage",
    "coverageProvider": "babel",
    "coverageReporters": [
      "json",
      "text",
      "lcov",
      "clover"
    ],
    "detectLeaks": false,
    "detectOpenHandles": false,
    "errorOnDeprecated": false,
    "expand": false,
    "findRelatedTests": false,
    "forceExit": false,
    "json": false,
    "lastCommit": false,
    "listTests": false,
    "logHeapUsage": false,
    "maxConcurrency": 5,
    "maxWorkers": 7,
    "noStackTrace": false,
    "nonFlagArgs": [],
    "notify": false,
    "notifyMode": "failure-change",
    "onlyChanged": false,
    "onlyFailures": false,
    "passWithNoTests": false,
    "projects": [],
    "reporters": [
      [
        "default",
        {}
      ],
      [
        "D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-html-reporters\\index.js",
        {
          "filename": "reports.html",
          "pageTitle": "JS & TS Test Execution Report",
          "hideIcon": true
        }
      ],
      [
        "D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\jest-stare\\lib\\index.js",
        {
          "resultDir": "results/jest-stare/",
          "reportTitle": "jest-stare!",
          "coverageLink": "./coverage/lcov-report/index.html",
          "additionalResultsProcessors": [],
          "resultHtml": "index.html",
          "resultJson": "jest-results.json"
        }
      ]
    ],
    "rootDir": "D:\\Projects\\Tavisca\\TS-Jest-Prj",
    "runTestsByPath": false,
    "skipFilter": false,
    "testFailureExitCode": 1,
    "testPathPattern": "",
    "testSequencer": "D:\\Projects\\Tavisca\\TS-Jest-Prj\\node_modules\\@jest\\test-sequencer\\build\\index.js",
    "updateSnapshot": "new",
    "useStderr": false,
    "watch": false,
    "watchAll": false,
    "watchman": true
  },
  "endTime": 1600285304668,
  "_reporterOptions": {
    "publicPath": "D:\\Projects\\Tavisca\\TS-Jest-Prj",
    "filename": "reports.html",
    "expand": false,
    "pageTitle": "JS & TS Test Execution Report",
    "hideIcon": true,
    "testCommand": "npx jest"
  },
  "attachInfos": {}
}